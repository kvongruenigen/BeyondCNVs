plot(df_final,x1,x2, col = cluster)
plot(df_final$x1,df_final$x2, col = df_final$cluster)
levels(df_final$cluster)
levels(df_final$cluster)
level(df_final$cluster)
sum(df_final$cluster)
table(df_final$cluster)
df_final$cluster
plot(df_final$x1, df_final$x2, col = df_final$cluster)
par(mfrow = c(1, 3), oma = c(0, 0, 0, 0), mar = c(1, 2, 2, 0.25))
hc1 <- hclust(dist(df_final), method = "complete")
plot(hc1, main = "complete", xlab = "", sub = "")
hc2 <- hclust(dist(df_final), method = "single")
plot(hc2, main = "single", xlab = "", sub = "")
hc3 <- hclust(dist(df_final), method = "ward.D")
plot(hc3, main = "ward", xlab = "", sub = "")
hc1_cut <- cutree(hc1, 3)
head(hc1_cut)
colo <- rainbow(3)[as.numeric(hc1_cut)]
par(mfrow = c(1, 1))
plot(hc1, xlab = "", sub = "")
rect.hclust(hc1, k = 5, border = rainbow(3))
hc1_cut <- cutree(hc1, 3)
head(hc1_cut)
colo <- rainbow(3)[as.numeric(hc1_cut)]
par(mfrow = c(1, 1))
plot(hc1, xlab = "", sub = "")
rect.hclust(hc1, k = 3, border = rainbow(3))
hc1_cut <- cutree(hc1, 3)
head(hc1_cut)
colo <- rainbow(3)[as.numeric(hc1_cut)]
par(mfrow = c(1, 1))
plot(hc1, xlab = "", sub = "Complete Linkage")
rect.hclust(hc1, k = 3, border = rainbow(3))
8+7-3*12
rect.hclust(hc1, k = 4, border = rainbow(3))
plot(hc1, xlab = "", sub = "Complete Linkage")
rect.hclust(hc1, k = 4, border = rainbow(3))
?rect.hclust
?cutree
?kmeans
a <- kmeans(df_final, centers = 2)
a
a <- kmeans(df_final, centers = 2)
b <- kmeans(df_final, centers = 3)
c <- kmeans(df_final, centers = 4)
d <- kmeans(df_final, centers = 5)
?silhouette
library(FactoMineR)
library(factoextra)
library(cluster)
library(psych)
library(tidyverse)
?silhouette
library(cluster)
test_sil <- silhouette(a)
test_sil <- silhouette(a,b,c,d)
D <- daisy(df_final)
?daisy
plot(silhouette(a$cluster, D), col=1:8)
plot(silhouette(a$cluster, D), col=1:3)
plot(silhouette(a$cluster, D), col=c(1,2,3))
plot(silhouette(a$cluster, D),)
plot(silhouette(a$cluster, D), border = NA)
a$cluster
plot(silhouette(a$cluster, D), col = a$cluser, border = NA)
plot(silhouette(a$cluster, D), col = a$cluster, border = NA)
library(mclust)
mb3 <- Mclust(df_final, 3)
plot(mb, what=c("classification"))
plot(mb3, what=c("classification"))
legend("bottomleft", legend=paste("Cluster", 1:4), bty='n',
pch=mclust.options("classPlotSymbols")[1:4], # is 16  0 17  3
col=mclust.options("classPlotColors")[1:4])  # or some approx color
plot(mb3, what=c("classification"))
legend("bottomleft", legend=paste("Cluster", 1:4), bty='n',
pch=mclust.options("classPlotSymbols")[1:4], # is 16  0 17  3
col=mclust.options("classPlotColors")[1:4])  # or some approx color
plot(mb3, what=c("classification"))
legend("bottomleft", legend=paste("Cluster", 1:4), bty='n',
pch=mclust.options("classPlotSymbols")[1:4], # is 16  0 17  3
col=mclust.options("classPlotColors")[1:4])  # or some approx color
plot(mb3, what=c("classification"))
uncert <- which.max( mcl$uncertainty)  # most difficult observation to cluster
uncert <- which.max( mb3$uncertainty)  # most difficult observation to cluster
points( df_final[uncert,], cex=2, lwd=2)
plot(mb3, what=c("classification"))
uncert <- which.max( mb3$uncertainty)  # most difficult observation to cluster
points( df_final[uncert,], cex=2, lwd=2)
plot( mb3, what="density", type="persp")
mb3$classification
plot(df_final$x1, df_final$x2, col = c(1:3))
kmeans(df_final, centers = c(2:5))
si <- silhouette( a$cluster, dist(df_final))
plot( si, col=2:3, main='')
for (k in 3:4)  # compact form for other `k`
plot( silhouette( kmeans( swiss, centers=k)$cluster, dist(swiss)),
col=2:(k+1), main='')
plot( silhouette( kmeans( df_final, centers=k)$cluster, dist(df_final)),
col=2:(k+1), main='')
par(mfrow = c(3,2))
for (k in 2:5)  # compact form for other `k`
plot( silhouette( kmeans( df_final, centers=k)$cluster, dist(df_final)),
col=2:(k+1), main='')
si
str(si)
#ARIMA model with AR(1) to sb
ar.dd <- ar(dd, order.max = 1)
str(sb)
table(sb)
head(sb)
#ARIMA model with AR(1) to sb
ddsb <- cbind(dd,sb[,8])
View(ddsb)
colnames(ddsb)
colnames(ddsb) <- c("dd","law")
colnames(ddsb)
ar.dd <- ar(ddsb, order.max = 1)
seas_adj_ts <- dd - decomp$time.series[, 1]
par(mfrow = c(1,2))
plot(dd, ylab = "Driver deaths", main = "Raw ts")
plot(seas_adj_ts, ylab = "Driver deaths", main = "Seasonally adjusted ts")
?ar
?arima
m.ar <-arima(ddsb,c(1,0,0))
# Predict monthly number of deaths in next 2 years from ar.sb
forecast <- predict(ar.dd, newdata = ddsb)
# Predict monthly number of deaths in next 2 years from ar.sb
forecast <- predict(ar.dd, newdata = ddsb)
plot.ts(ddsb)
points(forecast , type = "l", col = 2)
dd
# Predict monthly number of deaths in next 2 years from ar.sb
forecast <- predict(ar.dd, n.ahead = 24)
plot.ts(ddsb)
points(forecast$pred, type = "l", col = 2)
# Predict monthly number of deaths in next 2 years from ar.sb
forecast <- predict(ar.dd, n.ahead = 24)
plot.ts(dd)
points(forecast$pred, type = "l", col = 2)
max(dd)
max(dd[,1])
dd[,1]
dd[1,]
forecast <- predict(ar.dd, n.ahead = 24)
plot.ts(dd)
points(forecast$pred, type = "l", col = 2)
#ARIMA model with AR(1) to sb
ddsb <- cbind(dd,sb[,8])
colnames(ddsb) <- c("dd","law")
ar.dd <- ar(ddsb, order.max = 1)
# Predict monthly number of deaths in next 2 years from ar.sb
forecast <- predict(ar.dd, n.ahead = 24)
plot.ts(dd)
points(forecast$pred, type = "l", col = 2)
ar.dd <- arima(ddsb, season = c(1, 0, 0))
ar.dd <- arima(dd, season = c(1, 0, 0))
ar.dd <- arima(dd, order = 1, season = c(1, 0, 0))
ar.dd <- arima(dd, season = c(1, 0, 0))
ddsb <- cbind(dd,sb[,8])
colnames(ddsb) <- c("dd","law")
ddsb <- cbind(dd,sb[,8])
colnames(ddsb) <- c("dd","law")
## f)
```{r}
The prediction for the next two years shows a descreasing number in driver deaths.
# Predict monthly number of deaths in next 2 years from ar.sb
forecast <- predict(ar.dd, n.ahead = 24)
plot.ts(dd)
points(forecast$pred, type = "l", col = 2)
rm(list = ls())
library(tidyverse)
library(readr)
TCGA_data <- read_delim("Downloads/gdc_download_20230201_123929.386387/TCGA_data.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(TCGA_data)
tcga <- read_delim("Downloads/gdc_download_20230201_123929.386387/TCGA_data.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
head(tcga)
summary(tcga)
table(tcga)
table(tcga$Chromosome)
table(tcga$GDC_Aliquot)
install.packages("cBioPortalData")
library(cBioPortalData)
install.packages("cbioportalR")
?cbioportalR
install.packages("AnVIL")
install.packages("rapiclient")
library(cBioPortalData)
# Install rapiclient
library(rapiclient)
install.packages(c("BH", "bookdown", "broom", "class", "cli", "clue", "codetools", "colorspace", "curl", "dbplyr", "dplyr", "DT", "e1071", "effectsize", "emmeans", "evaluate", "fansi", "fma", "fontawesome", "forcats", "forecast", "formatR", "fs", "future", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggstatsplot", "Hmisc", "htmlwidgets", "httpuv", "igraph", "insight", "kernlab", "knitr", "lava", "locfit", "lubridate", "lwgeom", "markdown", "MASS", "multcomp", "nlme", "packrat", "parallelly", "parameters", "pbapply", "pbkrtest", "performance", "progressr", "purrr", "Rcpp", "RcppArmadillo", "RcppParallel", "RcppTOML", "RCurl", "readr", "readxl", "recipes", "reticulate", "rgdal", "rmarkdown", "rsconnect", "rstatix", "s2", "sass", "sourcetools", "sp", "spatial", "statmod", "statsExpressions", "stringi", "survival", "tidygraph", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("BH", "bookdown", "broom", "class", "cli", "clue", "codetools", "colorspace", "curl", "dbplyr", "dplyr", "DT", "e1071", "effectsize", "emmeans", "evaluate", "fansi", "fma", "fontawesome", "forcats", "forecast", "formatR", "fs", "future", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggstatsplot", "Hmisc", "htmlwidgets", "httpuv", "igraph", "insight", "kernlab", "knitr", "lava", "locfit", "lubridate", "lwgeom", "markdown", "MASS", "multcomp", "nlme", "packrat", "parallelly", "parameters", "pbapply", "pbkrtest", "performance", "progressr", "purrr", "Rcpp", "RcppArmadillo", "RcppParallel", "RcppTOML", "RCurl", "readr", "readxl", "recipes", "reticulate", "rgdal", "rmarkdown", "rsconnect", "rstatix", "s2", "sass", "sourcetools", "sp", "spatial", "statmod", "statsExpressions", "stringi", "survival", "tidygraph", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("BH", "bookdown", "broom", "class", "cli", "clue", "codetools", "colorspace", "curl", "dbplyr", "dplyr", "DT", "e1071", "effectsize", "emmeans", "evaluate", "fansi", "fma", "fontawesome", "forcats", "forecast", "formatR", "fs", "future", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggstatsplot", "Hmisc", "htmlwidgets", "httpuv", "igraph", "insight", "kernlab", "knitr", "lava", "locfit", "lubridate", "lwgeom", "markdown", "MASS", "multcomp", "nlme", "packrat", "parallelly", "parameters", "pbapply", "pbkrtest", "performance", "progressr", "purrr", "Rcpp", "RcppArmadillo", "RcppParallel", "RcppTOML", "RCurl", "readr", "readxl", "recipes", "reticulate", "rgdal", "rmarkdown", "rsconnect", "rstatix", "s2", "sass", "sourcetools", "sp", "spatial", "statmod", "statsExpressions", "stringi", "survival", "tidygraph", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "yaml"))
sessionInfo()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnVIL")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cBioPortalData")
library(cBioPortalData)
library(AnVIL)
sessionInfo()
.rs.restartR()
sessionInfo()
library(cBioPortalData)
install.packages(c("boot", "class", "codetools", "foreign", "MASS", "Matrix", "nlme", "spatial", "survival"), lib="/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library")
library(cBioPortalData)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(cBioPortalData)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cBioPortalData")
library(cBioPortalData)
library(AnVIL)
library(dplyr)
library(cBioPortalData)
# Install rapiclient
library(rapiclient)
cbio <- cBioPortal()
studies <- getStudies(cbio, buildReport = TRUE)
head(studies)
# Example Analysis: Kaplan-Meier Plot
# We can use information in the colData to draw a K-M plot with a few variables from the colData slot of the MultiAssayExperiment. First, we load the necessary packages:
library(survival)
library(survminer)
install.packages("sruvminer")
install.packages("survminer")
# Install rapiclient
library(rapiclient)
client <- get_api(url = "https://www.cbioportal.org/api/v2/api-docs")
library(cBioPortalData)
cbio <- cBioPortal()
studies <- getStudies(cbio, buildReport = TRUE)
head(studies)
######## 2 MAIN FUNCTIONS ##############################
# cBioDataPack: Obtain Study Data as Zipped Tarballs
# This function will access the packaged data from and return an integrative MultiAssayExperiment representation.
laml <- cBioDataPack("laml_tcga", ask = FALSE)
laml
acc <- cBioPortalData(api = cbio, by = "hugoGeneSymbol", studyId = "acc_tcga",
genePanelId = "IMPACT341",
molecularProfileIds = c("acc_tcga_rppa", "acc_tcga_linear_CNA")
)
acc
install.packages("MAFDash")
install.packages("TCGABiolinks")
install.packages("TCGAretriever")
library(TCGAretriever)
# Obtain a list of cancer studies from cBio
all_studies <- get_cancer_studies()
head(all_studies)
View(all_studies)
View(all_studies)
all_studies[,1]
head(tcga_studies)
tcga_studies <- all_studies[keep, ]
keep <- grepl('tcga_pub$', all_studies[,1])
tcga_studies <- all_studies[keep, ]
head(tcga_studies)
head(tcga_studies[, 1:2])
# Define the cancer study id: brca_tcga_pub
my_csid <- "brca_tcga_pub"
# Obtain genetic profiles
blca_pro <- get_genetic_profiles(csid = my_csid)
head(blca_pro[, 1:2], n = 8)
# Obtain cases
blca_cas <- get_case_lists(csid = my_csid)
head(blca_cas[, 1:2])
# Download RNA
brca_RNA <- TCGAretriever::get_profile_data(case_id = q_cases, gprofile_id = rna_prf, glist = q_genes)
# Define a set of genes of interest
q_genes <- c("TP53", "MDM2", "E2F1", "EZH2")
q_cases <- "brca_tcga_pub_complete"
rna_prf <- "brca_tcga_pub_mrna"
mut_prf <- "brca_tcga_pub_mutations"
# Download RNA
brca_RNA <- TCGAretriever::get_profile_data(case_id = q_cases, gprofile_id = rna_prf, glist = q_genes)
help(tempdir)
tempdir()
list.files(tempdir(), all.files=TRUE, recursive=TRUE)
head(brca_RNA[, 1:5])
# Set SYMBOLs as rownames
# Note that you may prefer to use the tibble package for this
rownames(brca_RNA) <- brca_RNA$COMMON
brca_RNA <- brca_RNA[, -c(1,2)]
# Download mutations (simple)
brca_MUT <- TCGAretriever::get_profile_data(case_id = q_cases, gprofile_id = mut_prf, glist = q_genes)
rownames(brca_MUT) <- brca_MUT$COMMON
brca_MUT <- brca_MUT[, -c(1,2)]
# Show results
brca_RNA[,1:6]
brca_MUT[,1:6]
# Coerce to data.frame with numeric features
df <- data.frame(t(brca_RNA), stringsAsFactors = FALSE)
for(i in 1:ncol(df)) { df[, i] <- as.numeric(df[, i])}
# Visualize the correlation between EZH2 and E2F1
with(df,
plot(E2F1, EZH2,
pch = 19, cex = 0.5, main = "E2F1-EZH2 correlation in BRCA"))
# Visualize the correlation between EZH2 and E2F1
with(df,
plot(E2F1, EZH2,
pch = 19, cex = 0.5, main = "E2F1-EZH2 correlation in BRCA"))
# Visualize the correlation between EZH2 and E2F1
with(df,
plot(E2F1, EZH2,
pch = 19, cex = 0.5, main = "E2F1-EZH2 correlation in BRCA"))
# Coerce to data.frame with numeric features
df <- data.frame(t(brca_RNA), stringsAsFactors = FALSE)
for(i in 1:ncol(df)) { df[, i] <- as.numeric(df[, i])}
df$TP53.status <- as.factor(ifelse(brca_MUT["TP53",] == "NaN", "WT", "MUT"))
# Split data based on TP53.status
lst <- split(df, f = df$TP53.status)
# Visualize the correlation between MDM2 and TP53 by P53 mutation status
par(mfrow = c(1, 2))
for(x in names(lst)) {
with(lst[[x]],
plot(TP53, MDM2,
pch = 19, cex = 0.5,
xlim = c(-2.6, 2.2), ylim = c(-1.6, 3.6),
main = paste0("MDM2-vs-P53 in ", x , " P53 tumors")))
}
print('#'*20)
print('hello')
all <- get_genetic_profiles(csid = tcga_studies$cancer_study_id)
head(tcga_studies)
head(tcga_studies[, 1:2])
# Select only public tcga studies
keep <- grepl('tcga$', all_studies[,1])
tcga_studies <- all_studies[keep, ]
head(tcga_studies[, 1:2])
# Select only public tcga studies
keep <- grepl('tcga_pub$', all_studies[,1])
tcga_studies <- all_studies[keep, ]
head(tcga_studies[, 1:2])
?get_cancer_studies
my_csid <- tcga_studies$cancer_study_id
my_csid
tcga <- get_genetic_profiles(csid = my_csid)
tcga_studies$cancer_study_id[1:2]
my_csid <- tcga_studies$cancer_study_id[1:2]
tcga <- get_genetic_profiles(csid = my_csid)
my_csid <- "laml_tcga_pub"
tcga <- get_genetic_profiles(csid = my_csid)
my_csid <- c("laml_tcga_pub", "brca_tcga_pub"
)
tcga <- get_genetic_profiles(csid = my_csid)
getwd
getwd()
setwd("/Users/kay/Programming/Project/")
rm(list = ls())
library(tidyverse)
tcga <- read_delim("Downloads/gdc_download_20230201_123929.386387/TCGA_data.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
# Install rapiclient
library(rapiclient)
client <- get_api(url = "https://www.cbioportal.org/api/v2/api-docs")
library(cBioPortalData)
cbio <- cBioPortal()
studies <- getStudies(cbio, buildReport = TRUE)
head(studies)
View(studies)
View(studies)
View(studies)
View(studies)
head(studies)
source("https://bioconductor.org/biocLite.R")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
source("https://bioconductor.org/biocLite.R")
biocLite("TCGAbiolinks")
library(TCGAbiolinks)
install.packages("TCGAbiolinks")
library(TCGAbiolinks)
source("https://bioconductor.org/biocLite.R")
rm(list = ls())
# cBioportal ##############################################
# Install rapiclient
library(rapiclient)
client <- get_api(url = "https://www.cbioportal.org/api/v2/api-docs")
library(cBioPortalData)
cbio <- cBioPortal()
studies <- getStudies(cbio, buildReport = TRUE)
View(studies)
View(studies)
library(TCGAretriever)
# Obtain a list of cancer studies from cBio
all_studies <- get_cancer_studies()
# Select only public tcga studies
keep <- grepl('tcga_pub$', all_studies[,1])
tcga_studies <- all_studies[keep, ]
head(tcga_studies[, 1:2])
my_csid <- c("laml_tcga_pub") # can only load one at a time so far
tcga <- get_genetic_profiles(csid = my_csid) # NOT MAFs
#check if exact string 'Eas' exists in conf column
sum(str_detect(studies$studyId, '^tcga$'))
#check if exact string 'Eas' exists in conf column
sum(str_detect(studies$studyId, '$tcga$'))
#check if exact string 'Eas' exists in conf column
sum(str_detect(studies$studyId, '$tcga'))
studies$studyId
#check if exact string 'Eas' exists in conf column
sum(str_detect(studies$studyId, 'tcga'))
head(studies)
sum(studies$referenceGenome == 'hg38')
BiocManager::install(TCGAbiolink)
BiocManager::install(TCGAbiolinks)
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install(TCGAbiolinks)
library(BiocManager)
BiocManager::install(TCGAbiolinks)
BiocManager::install(TCGAbiolink)
BiocManager::install(TCGAbiolinks)
sessionInfo()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
library(BiocManager)
library(TCGAbiolinks)
browseVignettes("TCGAbiolinks")
library(dplyr)
library(DT)
version
version()
packageVersion("TCGAbiolinks")
sum(studies$referenceGenome == 'hg38')
#check if exact string 'Eas' exists in conf column
# Search for 'tcga' in the studyID and refgenome == hg38
sum(str_detect(studies$studyId, 'tcga'))
# cBioPortal Access #########
library(rapiclient)
library(cBioPortalData)
client <- get_api(url = "https://www.cbioportal.org/api/v2/api-docs")
cbio <- cBioPortal()
studies <- getStudies(cbio, buildReport = TRUE)
head(studies)
# Get TCGA studies
#check if exact string 'Eas' exists in conf column
# Search for 'tcga' in the studyID and refgenome == hg38
sum(str_detect(studies$studyId, 'tcga'))
library(tidyverse)
#check if exact string 'Eas' exists in conf column
# Search for 'tcga' in the studyID and refgenome == hg38
sum(str_detect(studies$studyId, 'tcga'))
library(stringr)
#check if exact string 'Eas' exists in conf column
# Search for 'tcga' in the studyID and refgenome == hg38
sum(str_detect(studies$studyId, 'tcga'))
str_detect(studies$studyId, 'tcga')
#check if exact string 'Eas' exists in conf column
# Search for 'tcga' in the studyID and refgenome == hg38
list(str_detect(studies$studyId, 'tcga'))
#check if exact string 'Eas' exists in conf column
# Search for 'tcga' in the studyID and refgenome == hg38
selection <- list(str_detect(studies$studyId, 'tcga'))
studies$studyId
library(AnVIL)
rm(list = ls())
library(rapiclient)
library(cBioPortalData)
library(AnVIL)
library(stringr)
# Get TCGA studies ----
client <- get_api(url = "https://www.cbioportal.org/api/v2/api-docs")
cbio <- cBioPortal()
studies <- getStudies(cbio, buildReport = TRUE)
head(studies)
View(studies)
getwd()
query.bc <- GDCquery(project = "TCGA-GBM",
data.category = 'Copy Number Variation',
legacy = FALSE,
data.type='Masked Copy Number Segment',
sample.type='Primary Tumor'
)
GDCdownload(query.bc, method = "api",directory ="./GDC_data")
seg <- GDCprepare(query = query.bc, save = TRUE, save.filename = "gbm.rda",directory ="./data/GDC_data")
seg <- GDCprepare(query = query.bc, save = TRUE, save.filename = "gbm.rda",directory ="./GDC_data")
browseVignettes("cBioPortal")
browseVignettes("cBioPortalData")
?cBioPortalData
?cBioPortal
?getStudies
?getStudies
?cBioPortalData
?getStudies
?getStudies()
stu <- getStudies(cbio, buildReport = FALSE)
rm(list = ls())
library(rapiclient)
library(cBioPortalData)
library(AnVIL)
library(stringr)
# Get TCGA studies ----
client <- get_api(url = "https://www.cbioportal.org/api/v2/api-docs")
cbio <- cBioPortal()
studies <- getStudies(cbio, buildReport = TRUE)
head(studies)
