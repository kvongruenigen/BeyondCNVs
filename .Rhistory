library(readr)
X668803aa_e09b_461b_93d0_a6886accd30f_wxs_aliquot_ensemble_masked <- read_delim("Desktop/Project/data/gdc_download_20230309_130259.274657/0ac39a77-bf7a-476c-b96e-8d351ce50614/668803aa-e09b-461b-93d0-a6886accd30f.wxs.aliquot_ensemble_masked.maf",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE, skip = 7)
View(X668803aa_e09b_461b_93d0_a6886accd30f_wxs_aliquot_ensemble_masked)
dd <- read_delim("Desktop/Project/data/gdc_download_20230309_130259.274657/0ac39a77-bf7a-476c-b96e-8d351ce50614/668803aa-e09b-461b-93d0-a6886accd30f.wxs.aliquot_ensemble_masked.maf",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE, skip = 7)
head(dd)
dd <- read_delim("Desktop/Project/data/gdc_download_20230309_130259.274657/0ac39a77-bf7a-476c-b96e-8d351ce50614/668803aa-e09b-461b-93d0-a6886accd30f.wxs.aliquot_ensemble_masked.maf",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE, skip = 7)
library(readr)
dd <- read_delim("Desktop/Project/data/gdc_download_20230309_130259.274657/0ac39a77-bf7a-476c-b96e-8d351ce50614/668803aa-e09b-461b-93d0-a6886accd30f.wxs.aliquot_ensemble_masked.maf",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE, skip = 7)
head(dd)
dd <- read_delim("Desktop/Project/data/0ac39a77-bf7a-476c-b96e-8d351ce50614/668803aa-e09b-461b-93d0-a6886accd30f.wxs.aliquot_ensemble_masked.maf",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE, skip = 7)
dd <- read_delim("Desktop/Project/data/0b3ab4ef-c43c-4184-a396-27c0c5398d85.wxs.aliquot_ensemble_masked.maf",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE, skip = 7)
head(dd)
View(dd)
View(dd)
install.packages(TCGAutils)
install.packages('TCGAutils')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAutils")
library(R.utils)
library(TCGAutils)
library(curatedTCGAData)
library(MultiAssayExperiment)
library(RTCGAToolbox)
#library(MultiAssayExperiment)
library(RTCGAToolbox)
library(BiocFileCache)
library(rtracklayer)
library(R.utils)
install.packages('RTCGAToolbox')
install.packages('R.utils')
install.packages('curatedTCGAData')
#library(TCGAutils)
library(curatedTCGAData)
#library(MultiAssayExperiment)
library(RTCGAToolbox)
#library(BiocFileCache)
#library(rtracklayer)
library(R.utils)
#library(MultiAssayExperiment)
library(RTCGAToolbox)
#library(TCGAutils)
library(curatedTCGAData)
install.packages('curatedTCGAData')
library(RTCGAToolbox)
install.packages('RTCGAToolbox')
library(readr)
library(TCGAutils)
library(curatedTCGAData) # Not available for R version
library(readr)
df <- read_table("Desktop/Project/data/0a00b5bc-7d64-4eda-a1a4-751c0ff0c80f.wxs.aliquot_ensemble_masked.maf",
skip = 7)
View(df)
View(df)
view(df['VARIANT_CLASS'])
View(df['VARIANT_CLASS'])
install.packages('dplyr')
install.packages('TCGAutils')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAutils")
#####################################################################
# Turning barcodes into Sample UUIDs for mapping in progenetix
#####################################################################
# Suppress warnings
options(warn = -1)
# Suppress messages
options(show.error.messages = FALSE)
# Load necessary libraries
library(readr)
library(dplyr)
library(TCGAutils)
print('Converting aliquot UUID to sample UUID...')
# Import data frame and extract barcodes
data <- read_csv("temp/maf_data.csv")
echo('Hello')
print('Hello')
print('Hello', row.names = FALSE)
cat('Hello')
cat('Hello')
cat('How are you?')
library(dplyr)
?options
options(echo = False)
options(echo = FALSE)
library(dplyr)
print('hello')
options(echo = TRUE)
library(readr)
varImport <- read_delim("Projects/Project/data/varImport.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(varImport)
getOption('warn')
# Save default and disable warnings
oldw <- getOption("warn")
options(warn = -1)
# Load necessary libraries
library(readr)
library(dplyr)
library(TCGAutils)
cat('Converting aliquot UUID to sample UUID...\n')
# Import data frame and extract barcodes
invisible(data <- read_csv("temp/maf_data.csv"))
# Import data frame and extract barcodes
invisible(data <- read_csv("../temp/maf_data.csv"))
# Import data frame and extract barcodes
invisible(data <- read_csv("Projects/Project/temp/maf_data.csv"))
sample_barcodes <- unique(data['Tumor_Sample_Barcode'])
# Import data frame and extract barcodes
data <- read_csv("temp/maf_data.csv", show_col_types = FALSE)
# Import data frame and extract barcodes
data <- read_csv("Projects/Project/temp/maf_data.csv", show_col_types = FALSE)
library(readr)
mapfile <- read_delim("Projects/Project/temp/mapfile.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(mapfile)
library(dplyr)
# Load necessary libraries
library(readr)
library(dplyr)
library(TCGAutils)
# Load necessary libraries
library(readr)
library(dplyr, warn.conflicts = FALSE)
library(TCGAutils)
cat('Converting aliquot UUID to sample UUID...\n')
# Import data frame and extract barcodes
data <- read_csv("temp/maf_data.csv", show_col_types = FALSE)
# Convert barcodes into ids
for (id in sample_barcodes){
sam <- barcodeToUUID(id)
sam <- sam$sample_ids
sample_ids <- c(sample_ids, sam)
}
# Make a data frame for mapping
mapping_df <- data.frame(unlist(as.list(sample_barcodes)), unlist(sample_ids))
# Import data frame and extract barcodes
data <- read_csv("temp/maf_data.csv", show_col_types = FALSE)
# Import data frame and extract barcodes
data <- read_csv("Projects/Project/temp/maf_data.csv", show_col_types = FALSE)
sample_barcodes <- unique(data['Tumor_Sample_Barcode'])
# Create an empty list for the ids
sample_ids <- list()
# Convert barcodes into ids
for (id in sample_barcodes){
sam <- barcodeToUUID(id)
sam <- sam$sample_ids
sample_ids <- c(sample_ids, sam)
}
View(sample_barcodes)
# Convert barcodes into ids
for (id in sample_barcodes){
sam <- barcodeToUUID(id)
sam <- sam$sample_ids
sample_ids <- c(sample_ids, sam)
}
# Make a data frame for mapping
mapping_df <- data.frame(unlist(as.list(sample_barcodes)), unlist(sample_ids))
colnames(mapping_df) <- c("sample_barcode", "sample_ids")
# Join the two data frames based on matching Barcodes
mapfile <- left_join(data, mapping_df,
by = c("Tumor_Sample_Barcode" = "sample_barcode"))
# Rename the columns
colnames(mapfile) <- c("aliquot_id", "reference_id", "case_id",
"chromosome", "start", "end",
"variant_classification", "variant_type",
"reference_bases", "alternate_bases", "hgvsc", "hgvsp",
"hgvsp_short", "tumor_sample_barcode",
"all_effects", "transcript_id", "gene", "feature",
"feature_type", "hgnc_id", "ensp", "refseq", "sample_id")
# Select important ones and rearrange
mapfile <- mapfile %>% select(case_id, sample_id, aliquot_id,
reference_id, chromosome, start, end, variant_classification,
variant_type, reference_bases, alternate_bases, hgvsc, hgvsp,
hgvsp_short, sample_id, sample_barcode, all_effects,
transcript_id, gene, feature, feature_type, hgnc_id, ensp, refseq)
# Select important ones and rearrange
mapfile <- mapfile %>% select(case_id, sample_id, aliquot_id,
reference_id, chromosome, start, end, variant_classification,
variant_type, reference_bases, alternate_bases, hgvsc, hgvsp,
hgvsp_short, sample_id, all_effects,
transcript_id, gene, feature, feature_type, hgnc_id, ensp, refseq)
library(tidyverse)
library(ggplot2)
maf_data <- read_csv("Projects/BeyondCNVs/data/maf_data.csv")
library(tidyverse)
library(ggplot2)
maf_data <- read_csv("Projects/BeyondCNVs/temp/maf_data.csv")
maf_data$Chromosome <- as.factor(maf_data$Chromosome)
summary(maf_data)
keep <- list()
col_names <- colnames(maf_data)
for (i in seq_along(maf_data)) {
if (all(is.na(maf_data[[i]]) | maf_data[[i]] == "") == FALSE){
keep <- append(keep, col_names[i])
}
}
clean <- subset(maf_data, select = -c(keep))
summary(maf_data)
maf_data <- read_csv("Projects/BeyondCNVs/data/varImport.tsv")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
browseVignettes("maftools")
rm(list =ls())
# Load necessary libraries
suppressPackageStartupMessages(library(tidyverse))
library(TCGAutils)
# Import data frame and extract barcodes
cat("Loading data...\n")
data <- read_csv("temp/maf_data.csv", show_col_types = FALSE)
getwd()
setwd("/Users/kayvongrunigen/Projects/BeyondCNVs")
getwd(0)
getwd()
data <- read_csv("temp/maf_data.csv", show_col_types = FALSE)
sample_barcodes <- unique(data["Tumor_Sample_Barcode"])
aliquot_barcodes <- unique(data['aliquot_barcode'])
data <- read_csv("temp/maf_data.csv", show_col_types = FALSE)
rm(list =ls())
# Load necessary libraries
suppressPackageStartupMessages(library(tidyverse))
